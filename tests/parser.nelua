local Parser = require "..libs.parser"

-- TODO: Compare the ast in tests too
-- TODO: For error cases, check errloc

do
  local content = "x := 10"
  local new_parser_res = Parser.new("id_decl_no_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = "x: string = 10"
  local new_parser_res = Parser.new("id_decl_wrong_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_err())
end

do
  local content = "x: integer = 1.0"
  local new_parser_res = Parser.new("id_decl_wrong_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_err())
end

do
  local content = [[
X : type <const> = record{
  name: string,
  age: i64,
  chars: [5]string
}]]

  local new_parser_res = Parser.new("id_decl_anon_rec", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
X: type = record{
  name: string,
  age: i64,
  chars: [5]string
}]]

  local new_parser_res = Parser.new("id_decl_anon_rec_no_const", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_err())
end

do
  local content = [[
X := record{
  name: string,
  age: i64,
  chars: [5]string
}]]

  local new_parser_res = Parser.new("id_decl_anon_rec_no_const", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_err())
end

do
  local content = [[
X : <const> = record{
  name: string,
  age: i64,
  chars: [5]string
}]]

  local new_parser_res = Parser.new("id_decl_anon_rec_const_no_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
X : <const> = record{
  name: string,
  age: i64,
  chars: [5]string
}

Y : <const> = X
]]

  local new_parser_res = Parser.new("id_decl_type_id_no_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
X : <const> = record{
  name: string,
  age: i64,
  chars: [5]string
}

Y := X
]]

  local new_parser_res = Parser.new("id_decl_type_id_no_type_no_const", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_err())
end

do
  local content = [[
record X {
  name: string
}
]]

  local new_parser_res = Parser.new("record_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
record X {
  name: string
}

Y : <const> = X
]]

  local new_parser_res = Parser.new("id_decl_record_type", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
s := "hello world"

print(s.size)
]]

  local new_parser_res = Parser.new("rec_field_access", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
x := nil
]]

  local new_parser_res = Parser.new("nil_type_decl", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end

do
  local content = [[
while true {
  print("hello world")
  break
}
]]

  local new_parser_res = Parser.new("while_loop", content)
  assert(new_parser_res:is_ok())

  local parser = new_parser_res:get_ok()

  local parser_res = parser:parse()
  assert(parser_res:is_ok())
end
